{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["baseUrl","req","axios","get","nonExisting","id","content","date","important","then","res","data","concat","newObject","post","put","Note","note","toggleImportance","label","className","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initial","notesToShow","filter","map","find","n","changedNote","updated","catch","e","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","created","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"qLACMA,EAAU,aAuBD,EArBA,WACX,IAAMC,EAAMC,IAAMC,IAAIH,GAChBI,EAAc,CAChBC,GAAI,IACJC,QAAS,mCACTC,KAAM,2BACNC,WAAW,GAEf,OAAOP,EAAIQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKC,OAAOR,OAa5B,EAVA,SAAAS,GAEX,OADYX,IAAMY,KAAKd,EAASa,GACrBJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAQhB,EALA,SAACN,EAAIQ,GAEhB,OADYX,IAAMa,IAAN,UAAaf,EAAb,YAAwBK,GAAMQ,GAC/BJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,S,OCThBK,EAVF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACbC,EAAQF,EAAKT,UAAY,qBAAuB,iBACtD,OACE,qBAAIY,UAAU,OAAd,UACGH,EAAKX,QACN,wBAAQe,QAASH,EAAjB,SAAoCC,QCI3BG,EATM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAe,OAAZA,EACQ,KAGP,qBAAKH,UAAU,QAAf,SAAwBG,KCSjBC,EAdA,WAMX,OACI,sBAAKC,MANW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACI,uBACA,2GC0EGC,EA/EH,SAACC,GACX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRC,IAEGhC,MAAK,SAAAiC,GACJT,EAASS,QAEZ,IAEH,IAoCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAA3B,GAAI,OAAIA,EAAKT,aAEhE,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASe,IACvB,8BACE,yBAAQjB,QAAS,kBAAMgB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAAA5B,GAAI,OACnB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAjCD,SAACb,GAC1B,IAAMY,EAAOe,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1C,KAAOA,KAChC2C,EAAW,2BAAQ/B,GAAR,IAAcT,WAAYS,EAAKT,YAChDiC,EACUpC,EAAI2C,GACXvC,MAAK,SAAAwC,GACJhB,EAASD,EAAMa,KAAI,SAAAE,GAAC,OAAIA,EAAE1C,KAAOA,EAAK0C,EAAIE,SAE3CC,OAAM,SAAAC,GACLZ,EAAgB,SAAD,OAAUtB,EAAKX,QAAf,sCACf8C,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE1C,KAAOA,SAoBRgD,CAAmBpC,EAAKZ,MAF3CY,EAAKZ,SAMhB,uBAAMiD,SAxDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnD,QAAS4B,EACT3B,MAAM,IAAImD,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,IAE7BpB,EACQgB,GACPhD,MAAK,SAAAqD,GACJ7B,EAASD,EAAMpB,OAAOkD,IACtB3B,EAAW,QA6CX,UACE,uBAAO4B,MAAO7B,EAAS8B,SA1CJ,SAACT,GACxBpB,EAAWoB,EAAMU,OAAOF,UA0CpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MC3ENC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a22c17d8.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst baseUrl = '/api/notes';\r\n\r\nconst getAll = () => {\r\n    const req = axios.get(baseUrl);\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true\r\n    }\r\n    return req.then(res => res.data.concat(nonExisting));\r\n}\r\n\r\nconst create = newObject => {\r\n    const req = axios.post(baseUrl, newObject);\r\n    return req.then(res => res.data);\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const req = axios.put(`${baseUrl}/${id}`, newObject);\r\n    return req.then(res => res.data);\r\n}\r\n\r\nexport default { getAll, create, update }","import React from 'react';\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  const label = note.important ? 'make not important' : 'make important';\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Note;","import React from 'react';\r\n\r\nconst Notification = ({message}) => {\r\n    if(message === null){\r\n        return null;\r\n    }\r\n    return(\r\n        <div className='error'>{message}</div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from 'react';\r\n\r\nconst Footer = () =>{\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { useState, useEffect } from 'react';\r\nimport noteService from './services/notes';\r\nimport Note from './components/Note';\r\nimport Notification from './components/Notification';\r\nimport Footer from './components/Footer';\r\n\r\nconst App = (props) => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState('');\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initial => {\r\n        setNotes(initial);\r\n      });\r\n  }, []);\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5\r\n    };\r\n    noteService\r\n    .create(noteObject)\r\n    .then(created => {\r\n      setNotes(notes.concat(created));\r\n      setNewNote('');\r\n    });\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value);\r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(n => n.id === id);\r\n    const changedNote = { ...note, important: !note.important };\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(updated => {\r\n        setNotes(notes.map(n => n.id !== id ? n : updated))\r\n      })\r\n      .catch(e => {\r\n        setErrorMessage(`Note '${note.content}' was already removed from server`)\r\n        setTimeout(() => {\r\n          setErrorMessage(null);\r\n        }, 5000);\r\n        setNotes(notes.filter(n => n.id !== id))\r\n      }); \r\n  }\r\n\r\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map(note =>\r\n          <Note\r\n            key={note.id}\r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange} />\r\n        <button type='submit'>save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}